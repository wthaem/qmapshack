
# QMS configuration check

# Load configuration files QMSUser.cfg and CfgGISInternals.cfg
# Get all defined non-system variables
# Carry out some existence check for files and directories
# Make a few consistency checks

# Call script from MSVC x64 Native Tools command prompt: cmake -PVarCheck.cfg

#IF(EXISTS "${dir}" AND IS_DIRECTORY "${dir}")
#if(EXISTS <path-to-file-or-directory>)
 
#https://cmake.org/cmake/help/latest/command/if.html
#https://cmake.org/cmake/help/latest/manual/cmake-commands.7.html
#https://cmake.org/cmake/help/latest/command/message.html

set(CMAKE_N "\n")

cmake_policy(SET CMP0011 NEW)

message(NOTICE "QMS configuration check ...${CMAKE_N}")

# include configuration files:
include("QMSUser.cfg" OPTIONAL)

set(QMS_MSVC_DIR ".")

set(PKG "QMS")
include("CfgGISInternals.cfg" OPTIONAL)

set(PKG "QUAZIP")
include("CfgGISInternals.cfg" OPTIONAL)

# get all variables known to cmake
get_cmake_property(MY_VARS VARIABLES)

#message(NOTICE "${MY_VARS}")
#message(NOTICE "${CMAKE_BINARY_DIR}")
#message(NOTICE "${CMAKE_ROOT}")

message(NOTICE "${CMAKE_N}Found variables with values:${CMAKE_N}")

# remove cmake system variables and show values of all user-defined varaibles:
foreach(I ${MY_VARS})

  string(SUBSTRING ${I} 0 5 K)
  if(NOT (${K} STREQUAL "CMAKE") )
    message(NOTICE "${I}: ${${I}}")
  endif()
endforeach()

message(NOTICE "${CMAKE_N}Consistency checks:${CMAKE_N}")

#message(NOTICE $ENV{VCTOOLSVERSION})
if($ENV{VCTOOLSVERSION} STREQUAL ${MSVC_VER})
  message(NOTICE "VCTOOLSVERSION ${MSVC_VER} correct.")
else()
  message(NOTICE "VCTOOLSVERSION ${MSVC_VER} wrong!")
endif()  

if(${CMAKE_ROOT} MATCHES ".+${MSVC_YEAR}")
  message(NOTICE "MSVC_YEAR ${MSVC_YEAR} correct.")
else()  
  message(NOTICE "MSVC ${MSVC_YEAR} wrong!")
endif()


set(DIRS
${MSYS2_DIR}
${Qt5_DIR}
${GDAL_DEV_PATH}
${GISINTERNALS_DEV_PATH}
${JPEG_DEV_PATH}
${PROJ_DEV_PATH}
${PROJ_INCLUDE_DIR}
${QMSDIR}
${QT_DIR}
${QUAZIP_DEV_PATH}
${QUAZIP_INCLUDE_DIR}
${Qt5Widgets_DIR}
${QuaZip-Qt5_DIR}
${ROUTINO_DEV_PATH}
${ZLIB_INCLUDE_DIR}
${ZLIB_ROOT}
)

message(NOTICE "${CMAKE_N}Checking directories ...${CMAKE_N}")

foreach(I ${DIRS})
  #message(NOTICE ${I})
  set(RES "not found!")
  IF(EXISTS "${I}" AND IS_DIRECTORY "${I}")
    set(RES "exists.")
  endif()
  
  message(NOTICE "${I}: ${RES}")

endforeach()

set(FILES
${LIBPROJ_LIBRARY}
${ZLIB_LIBRARY}
${ZLIB_LIBRARY_RELEASE}
)

message(NOTICE "${CMAKE_N}Checking files ...${CMAKE_N}")

foreach(I ${FILES})
  #message(NOTICE ${I})
  set(RES "not found!")  
  IF(EXISTS "${I}")
    set(RES "exists.")
  endif()
  
  message(NOTICE "${I}: ${RES}")

endforeach()